Final Code:

import processing.video.*;

import java.util.Random;

import com.getflourish.stt.*;

import ddf.minim.*;

PFont font;

int ac = 1;

int time;

int spd = 1;

int h = 1;

int score;

int gold;

int word;

boolean shoot;

boolean lose;

float hits;

float shots;

int s=0;

Collector myCollector;

Treasure newTreasure;

PImage coin;

PImage poison;

PImage Fireball;

PImage img;

Poison newPoison;

AudioPlayer player;

AudioPlayer player2;

AudioPlayer player3;

Minim minim;

AudioInput in;

ArrayList asteroids;

AudioSample bad;

AudioSample good;

AudioSample tada;

Movie myMovie;

Movie myMovie2;

Movie myMovie3;

Movie myMovie4;

Movie myMovie5;

 

void setup()

{

    img = requestImage("hipsterdoge.png");

  font = loadFont("AgencyFB-Reg-20.vlw");

  size(800,800);

  asteroids = new ArrayList();

  noCursor();

  myCollector = new Collector();

  newTreasure = new Treasure();

  newPoison = new Poison();

 

minim = new Minim(this);

  in = minim.getLineIn(); // gets the sound value

   good = minim.loadSample("good.wav");

  bad = minim.loadSample("bad.wav");

  tada = minim.loadSample("tada.wav");

 player = minim.loadFile("game.mp3", 2048);

 player.play();

  player2 = minim.loadFile("gameover2.mp3", 2048);

   player3 = minim.loadFile("kyoui.mp3", 2048);

   player3.play();

 player.play();

  myMovie = new Movie(this, "scary.mov");//gets movie

  myMovie.frameRate(30);

  myMovie.noLoop();

  myMovie.pause();

   myMovie2 = new Movie(this, "FunnyScaryMovie.mov");//gets movie

  myMovie2.frameRate(30);

  myMovie2.noLoop();

  myMovie2.pause();

    myMovie3 = new Movie(this, "Samara.mov");//gets movie

  myMovie3.frameRate(30);

  myMovie3.noLoop();

  myMovie3.pause();

}

 

void draw()

{

 

  background(255);

  frameRate(30);

 

   if (img.width >0)

  {

   

    image(img,0,0,width,height);

  }

 

    //

  newTreasure.display();

  myCollector.display();

  myCollector.move();

  newPoison.display();

  //

 

 

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos1, newTreasure.ypos1, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

    newTreasure = new Treasure();

       score = score + 5;

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos2, newTreasure.ypos2, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

    newTreasure = new Treasure();

    

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos3, newTreasure.ypos3, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

    newTreasure = new Treasure();

   

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos4, newTreasure.ypos4, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

    newTreasure = new Treasure();

       score = score + 5;

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos5, newTreasure.ypos5, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

    newTreasure = new Treasure();

      

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos6, newTreasure.ypos6, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

    newTreasure = new Treasure();

  

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos7, newTreasure.ypos7, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

   

     

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos8, newTreasure.ypos8, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

   

     

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos9, newTreasure.ypos9, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

  

    

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newTreasure.xpos10, newTreasure.ypos10, newTreasure.sizeW, newTreasure.sizeH)) { 

    // println ("hit");

 

      

  }

 

 

 

 

   if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos1, newPoison.ypos1, newPoison.sizeW, newPoison.sizeH)) { 

    // println ("hit");

    newPoison = new Poison();

      

       

  }

 

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos2, newPoison.ypos2, newPoison.sizeW, newPoison.sizeH)) { 

    // println ("hit");

    newPoison = new Poison();

        score = score - 25;

      

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos3, newPoison.ypos3, newPoison.sizeW, newPoison.sizeH)) { 

    // println ("hit");

    newPoison = new Poison();

        score = score - 25;

      

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos4, newPoison.ypos4, newPoison.sizeW, newPoison.sizeH)) { 

    // println ("hit");

    newPoison = new Poison();

        score = score - 25;

      

      

  }

  if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos5, newPoison.ypos5, newPoison.sizeW, newPoison.sizeH)) {  

    // println ("hit");

    newPoison = new Poison();

        score = score - 25;

      

      

  }if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos6, newPoison.ypos6, newPoison.sizeW, newPoison.sizeH)) { 

    // println ("hit");

    newPoison = new Poison();

      

        score = score - 25;

      

  }if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos7, newPoison.ypos7, newPoison.sizeW, newPoison.sizeH)) { 

    // println ("hit");

    newPoison = new Poison();

      

        score = score - 25;

      

  }if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos8, newPoison.ypos8, newPoison.sizeW, newPoison.sizeH)) { 

    // println ("hit");

    newPoison = new Poison();

        score = score - 25;

      

      

  }if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos9, newPoison.ypos9, newPoison.sizeW, newPoison.sizeH)) { 

    // println ("hit");

    newPoison = new Poison();

        score = score - 25;

      

      

  }if (rectangle_collision (myCollector.xpos, myCollector.ypos, myCollector.sizeW, myCollector.sizeH,

  newPoison.xpos10, newPoison.ypos10, newPoison.sizeW, newPoison.sizeH)) { 

    // println ("hit");

    newPoison = new Poison();

        score = score - 25;

      

      

  }

 

 

 

 fill(255,0,0);

  text ("Time in ms: "+ millis(), width*.15, height*.9);

 

  if(!lose)

  {

    difficultyChange();

    spawn();

    moveAst();

    atk();

    display();

    checkLoss();

    textFont(font, 20);

     fill(255,0,0);

    text("Score: " + score, 10,15);

    text("Speed: " + spd, 10,31);

    text("Enemy health: " + h, 10, 47);

    if(shots != 0)

    {

      text("Accuracy: " + int(hits) + "/" + int(shots), 10, 63);

    }

    time++;

  }

  else

  {

    textFont(font, 40);

    text("GAME OVER",10,40);

    textFont(font,20);

    text("SCORE: " + score,10,70);

   

          

if (score<25){

  text ("You should practice.",10, 100);

  image(myMovie, 0, 0, displayWidth, displayHeight );

  myMovie.play();

 

  }

 

if (score>=25 && score<50){

  text ("doing better",10, 100);

  image(myMovie, 0, 0, displayWidth, displayHeight );

  myMovie.play();

  }

 

 

if (score>=50 && score<75){

  text ("you are OK, just OK",10, 100);

   image(myMovie3, 0, 0, displayWidth, displayHeight );

  myMovie3.play();

}

 

if (score>=75 && score<100){

  text ("Great!",10, 100);

  image(myMovie2, 0, 0, displayWidth, displayHeight );

  myMovie2.play();

}

if (score>=100){

  text ("Nice Play!",10, 100);

   image(myMovie2, 0, 0, displayWidth, displayHeight );

  myMovie2.play();

}

   

    else  if(millis() >=90000){

       

        player3.pause();

       

if (score<25){

  text ("You Should Practice Some More",10, 100);

  image(myMovie, 0, 0, displayWidth, displayHeight );

  myMovie.play();

 

  }

 

if (score>=25 && score<50){

  text ("Doing Better",10, 100);

  image(myMovie, 0, 0, displayWidth, displayHeight );

  myMovie.play();

  }

 

 

if (score>=50 && score<75){

  text ("You are OK, just OK",10, 100);

   image(myMovie3, 0, 0, displayWidth, displayHeight );

  myMovie3.play();

}

 

if (score>=75 && score<100){

  text ("Great!",10, 100);

  image(myMovie2, 0, 0, displayWidth, displayHeight );

  myMovie2.play();

}

if (score>=100){

  text ("Nice Play!",10, 100);

   image(myMovie2, 0, 0, displayWidth, displayHeight );

  myMovie2.play();

}

    }

  }

 

  shoot = false;

}

 

 

void mousePressed()

{

  shoot = true;

  shots ++;

}

 

void spawn()

{

  if(time == 30)

  {

    time = 0;

    Asteroid ta = new Asteroid(int(random(30,470)), int(random(20,40)), spd, h);

    asteroids.add(ta);

    ta = null;

    ac++;

  }

}

 

void moveAst()

{

    for(int i = 0; i < asteroids.size(); i++)

  {

    Asteroid ta = (Asteroid)asteroids.get(i);

    ta.move();

    ta = null;

  }

}

 

void display()

{

  for(int i = 0; i < asteroids.size(); i++)

  {

    Asteroid ta = (Asteroid)asteroids.get(i);

    ta.display();

    ta = null;

  }

  fill(0, 0, 255);

  //rect(mouseX, mouseY, 50, 50);

  //rect(mouseX, mouseY, 50, 50);

  rect(mouseX,1030,50,500);

 

  if(shoot)

  {

    stroke(0,0, 255);

    line(mouseX,0,mouseX,1000);

    stroke(0);

  }

 

 

 

 

}

 

void atk()

{

  if(shoot)

  {

    for(int i = 0; i < asteroids.size(); i++)

    {

      Asteroid ta = (Asteroid) asteroids.get(i);

      if(mouseX < ta.x + ta.r && mouseX > ta.x - ta.r)

      {

        ta.health -= 1;

        if(ta.health <= 0)

        {

          ta = null;

          asteroids.remove(i);

          if (millis() == millis()+1)

          {

           spd++;

          }

          //score += int(spd) + h;

        }

        hits ++;

        score ++;

      }

    }

  }

}

 

void checkLoss()

{

  for(int i = 0; i < asteroids.size(); i++)

  {

    Asteroid ta = (Asteroid) asteroids.get(i);

  if(ta.y > 800)

    {

      lose = true;

    }

  }

}

 

 

void difficultyChange()

{

  if(spd < 8 && ac >= 10)

  {

    spd = ac / 10;

  }

  if(h < 3 && ac >= 10)

  {

    h = int(ac / 10);

  }

 

}

 

boolean rectangle_collision(float carX, float carY, float carW, float carH,

float treasureX, float treasureY, float treasureW, float treasureH)

{

  return (treasureX + treasureW/2 < carX + carW/2 &&

          treasureX - treasureW/2 > carX - carW/2 &&

          treasureY + treasureW/2 < carY + carW/2 &&

          treasureY - treasureW/2 > carY - carW/2);

}

 

void keyPressed() {

  int k = keyCode;

  if (k == ENTER | k == RETURN)

    myCollector.speed = myCollector.speed + 1;

  else if (k == ' ') 

    myCollector.speed = myCollector.speed - 1;

  else if (k == UP)     myCollector.up    = true;

  else if (k == DOWN)   myCollector.down  = true;

  else if (k == LEFT)   myCollector.left  = true;

  else if (k == RIGHT)  myCollector.right = true;

}

void keyReleased() {

  int k = keyCode;

  if      (k == UP)     myCollector.up    = false;

  else if (k == DOWN)   myCollector.down  = false;

  else if (k == LEFT)   myCollector.left  = false;

  else if (k == RIGHT)  myCollector.right = false;

}

 

void movieEvent(Movie m) {

  m.read();

}

 

class Collector {

  color c;

  float xpos;

  float ypos;

  float speed=7;

  int sizeW = 50;

  int sizeH = 50;

  boolean up, down, left, right;

  float topBorderC;

  float bottomBorderC;

  float rightBorderC;

  float leftBorderC;

  Collector() {

    c = color(175);

    xpos = width/2;

    ypos = width/2;

    setBordersC() ;

  }

  void setBordersC() {

    topBorderC = ypos - sizeW/2;

    bottomBorderC = ypos + sizeW/2;

    rightBorderC = xpos + sizeH/2;

    leftBorderC = xpos - sizeH/2;

  }

  void display() {

    rectMode(CENTER);

    stroke(0);

    fill(255, 0, 0);

    rect(xpos, ypos, sizeW, sizeH);

    

 

  }

  void move() {

    if (up)    ypos -= speed;

    if (down)  ypos += speed;

    if (left)  xpos -= speed;

    if (right) xpos += speed;

  }

}

 

class Asteroid

{

  int x;

  int y;

  int r;

  int maxHealth;

  int health;

  float speed;

 

  Asteroid(int tx, int tr, float tspeed, int th)

  {

    x = tx;

    r = tr;

    speed = tspeed;

    maxHealth = th;

    health = maxHealth;

  }

 

  void move()

  {

    y += speed + (millis()/10000);

  }

 

  void display()

  {

   

    fill(255, 0, 0);

    //textSize(32);

     //text("word", random(0,width-mouseX), random(0,height-mouseY) , r , r);

  

   Fireball=loadImage("fireball.png");

      image(Fireball, x - 70, y - 70, r + 100, r + 100) ;

   

    text("word", x, y,  0,  0 ); 

    float hbar = health/maxHealth * 20;

    println(health + "" + maxHealth);

    fill(255,0,0);

    textFont(font, 0);

    text(health, x - 2, y + 5);

  }

}

 

class Poison {

   color c;

  float xpos;

  float ypos;

   float xpos1;

  float ypos1;

   float xpos2;

  float ypos2;

   float xpos3;

  float ypos3;

     float xpos4;

  float ypos4;

       float xpos5;

  float ypos5;

   float xpos6;

  float ypos6;

     float xpos7;

  float ypos7;

     float xpos8;

  float ypos8;

    float xpos9;

  float ypos9;

    float xpos10;

  float ypos10;

  int sizeW = 10;

  int sizeH = 10;

float topBorderG;

float bottomBorderG;

 float rightBorderG;

  float leftBorderG;

  //  float speed;

Poison() {

    c = color(random(180, 255), 44, 208);

    xpos = int(random(width));

    ypos = int(random(height));

    xpos1 = int(random(width));

    ypos1 = int(random(height));

    xpos2 = int(random(width));

    ypos2 = int(random(height));

    xpos3 = int(random(width));

    ypos3 = int(random(height));

    xpos4 = int(random(width));

    ypos4 = int(random(height));

    xpos5 = int(random(width));

    ypos5 = int(random(height));

    xpos6 = int(random(width));

    ypos6 = int(random(height));

    xpos7 = int(random(width));

    ypos7 = int(random(height));

    xpos8 = int(random(width));

    ypos8 = int(random(height));

    xpos9 = int(random(width));

    ypos9 = int(random(height));

    xpos10 = int(random(width));

    ypos10 = int(random(height));

   

   

    setBordersG();

  }

  void setBordersG() {

    topBorderG = ypos - sizeW/2;

    bottomBorderG = ypos + sizeW/2;

    rightBorderG = xpos + sizeH/2;

    leftBorderG = xpos - sizeH/2;

  

  }

  void display() {

    rectMode(CENTER);

    stroke(0);

    fill(255);

    setBordersG();

    //rect(xpos, ypos, sizeW, sizeH);

 

     poison=loadImage("poison.png");

    

       image(poison, xpos,ypos, sizeW + 75, sizeH + 75) ;

    

       image(poison, xpos1,ypos1, sizeW + 75, sizeH + 75) ;

 

       image(poison, xpos2,ypos2, sizeW + 75, sizeH + 75) ;

 

       image(poison, xpos3,ypos3, sizeW + 75, sizeH + 75) ;

     

       image(poison, xpos4,ypos4, sizeW + 75, sizeH + 75) ;

     

       image(poison, xpos5,ypos5, sizeW + 75, sizeH + 75) ;

      

       image(poison, xpos6,ypos6, sizeW + 75, sizeH + 75) ;

     

       image(poison, xpos7,ypos7, sizeW + 75, sizeH + 75) ;

   

       image(poison, xpos8,ypos8, sizeW + 75, sizeH + 75) ;

  

       image(poison, xpos9,ypos9, sizeW + 75, sizeH + 75) ;

   

       image(poison, xpos10,ypos10, sizeW + 75, sizeH + 75) ;

 

 }

 

  void tele() {

    xpos = int(random(width));

    ypos = int(random(height));

    xpos1 = int(random(width));

    ypos1 = int(random(height));

    xpos2 = int(random(width));

    ypos2 = int(random(height));

    xpos3 = int(random(width));

    ypos3 = int(random(height));

    xpos4 = int(random(width));

    ypos4 = int(random(height));

    xpos5 = int(random(width));

    ypos5 = int(random(height));

    xpos6 = int(random(width));

    ypos6 = int(random(height));

    xpos7 = int(random(width));

    ypos7 = int(random(height));

    xpos8 = int(random(width));

    ypos8 = int(random(height));

    xpos9 = int(random(width));

    ypos9 = int(random(height));

    xpos10 = int(random(width));

    ypos10 = int(random(height));

   

  }

 

 

}

 

class Treasure {

 

  color c;

  float xpos;

  float ypos;

  float xpos1;

  float ypos1;

   float xpos2;

  float ypos2;

   float xpos3;

  float ypos3;

     float xpos4;

  float ypos4;

       float xpos5;

  float ypos5;

   float xpos6;

  float ypos6;

     float xpos7;

  float ypos7;

     float xpos8;

  float ypos8;

    float xpos9;

  float ypos9;

    float xpos10;

  float ypos10;

  int sizeW = 10;

  int sizeH = 10;

float topBorderG;

float bottomBorderG;

 float rightBorderG;

  float leftBorderG;

  //  float speed;

  Treasure() {

    c = color(random(180, 255), 44, 208);

    xpos = int(random(width));

    ypos = int(random(height));

    xpos1 = int(random(width));

    ypos1 = int(random(height));

    xpos2 = int(random(width));

    ypos2 = int(random(height));

    xpos3 = int(random(width));

    ypos3 = int(random(height));

    xpos4 = int(random(width));

    ypos4 = int(random(height));

    xpos5 = int(random(width));

    ypos5 = int(random(height));

    xpos6 = int(random(width));

    ypos6 = int(random(height));

    xpos7 = int(random(width));

    ypos7 = int(random(height));

    xpos8 = int(random(width));

    ypos8 = int(random(height));

    xpos9 = int(random(width));

    ypos9 = int(random(height));

    xpos10 = int(random(width));

    ypos10 = int(random(height));

    setBordersG();

  }

  void setBordersG() {

    topBorderG = ypos - sizeW/2;

    bottomBorderG = ypos + sizeW/2;

    rightBorderG = xpos + sizeH/2;

    leftBorderG = xpos - sizeH/2;

  

  }

  void display() {

    rectMode(CENTER);

    stroke(0);

    fill(255);

    setBordersG();

    //rect(xpos, ypos, sizeW, sizeH);

     coin=loadImage("coin.png");

       image(coin, xpos,ypos, sizeW+ 10, sizeH + 10) ;

     

       image(coin, xpos1,ypos1, sizeW + 10, sizeH + 10) ;

      

       image(coin, xpos2,ypos2, sizeW + 10, sizeH + 10) ;

      

       image(coin, xpos3,ypos3, sizeW + 10, sizeH + 10) ;

     

       image(coin, xpos4,ypos4, sizeW + 10, sizeH + 10) ;

      

       image(coin, xpos5,ypos5, sizeW + 10, sizeH + 10) ;

     

       image(coin, xpos6,ypos6, sizeW + 10, sizeH + 10) ;

      

       image(coin, xpos7,ypos7, sizeW + 10, sizeH + 10) ;

      

       image(coin, xpos8,ypos8, sizeW + 10, sizeH + 10) ;

    

       image(coin, xpos9,ypos9, sizeW + 10, sizeH + 10) ;

      

       image(coin, xpos10,ypos10, sizeW + 10, sizeH + 10) ;

  }

  void tele() {

    xpos = int(random(width));

    ypos = int(random(height));

    xpos1 = int(random(width));

    ypos1 = int(random(height));

    xpos2 = int(random(width));

    ypos2 = int(random(height));

    xpos3 = int(random(width));

    ypos3 = int(random(height));

    xpos4 = int(random(width));

    ypos4 = int(random(height));

    xpos5 = int(random(width));

    ypos5 = int(random(height));

    xpos6 = int(random(width));

    ypos6 = int(random(height));

    xpos7 = int(random(width));

    ypos7 = int(random(height));

    xpos8 = int(random(width));

    ypos8 = int(random(height));

    xpos9 = int(random(width));

    ypos9 = int(random(height));

    xpos10 = int(random(width));

    ypos10 = int(random(height));

   

  }

}
